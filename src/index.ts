import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import Store from 'electron-store'
import fs from 'fs'
import path from 'path'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
const store = new Store({
  defaults: {
    folder_location: app.getPath('appData') + '\\.minecraft\\profiles\\forge\\'
  }
})

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 500,
    width: 500,
    maxHeight: 500,
    maxWidth: 500,
    frame: false,
    fullscreenable: false,
    resizable: false,
    icon: path.join(__dirname + '/icon.ico'),
    webPreferences: {
      devTools: false,
      webSecurity: false,
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.addListener('closeWindow', (e, arg) => {
    if (arg)
      mainWindow.close()
  })

  ipcMain.addListener('minimizeWindow', (e, arg) => {
    if (arg)
      mainWindow.minimize()
  })

  ipcMain.addListener('createFolders', (e, arg) => {
    if (!fs.existsSync(arg))
      fs.mkdir(arg, () => {
      })
  })

  ipcMain.addListener('writeContents', (e, arg, arg2) => {
    if (!fs.existsSync(arg))
      fs.writeFileSync(arg, arg2);
  })

  ipcMain.handle('getStoreValue', (e, key) => {
    return store.get(key)
  })

  ipcMain.handle('folder', async (event, arg) => {  
    // If the platform is 'win32' or 'Linux'
    if (process.platform !== 'darwin') {
      // Resolves to a Promise<Object>
      await dialog.showOpenDialog({
        title: 'Select the Directory',
        defaultPath: arg,
        buttonLabel: 'Select',
        // Specifying the File Selector Property
        properties: ['openDirectory']
      }).then(file => {
        // Stating whether dialog operation was
        // cancelled or not.
        console.log(file.canceled);
        if (!file.canceled) {
          const folder = file.filePaths[0].toString();
          store.set('folder_location', folder)
          return folder
        }  
      })
    }
    else {
      // If the platform is 'darwin' (macOS)
      await dialog.showOpenDialog({
        title: 'Select the Directory',
        defaultPath: arg,
        buttonLabel: 'Select',
        // Specifying the File Selector and Directory 
        // Selector Property In macOS
        properties: ['openDirectory']
      }).then(file => {
        console.log(file.canceled);
        if (!file.canceled) {
        const folder = file.filePaths[0].toString();
        store.set('folder_location', folder)
        return folder
      }  
    })
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);



// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.